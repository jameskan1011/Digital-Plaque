
atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  0080008a  0080008a  00000994  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e1  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045a  00000000  00000000  00001ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000662  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000572  00000000  00000000  00002b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000132a  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 01 	jmp	0x298	; 0x298 <__ctors_end>
   4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  10:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  1c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  24:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  28:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  2c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  30:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  3c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  44:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  48:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  4c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_19>
  50:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  54:	a0 01       	movw	r20, r0
  56:	9e 01       	movw	r18, r28
  58:	9e 01       	movw	r18, r28
  5a:	9e 01       	movw	r18, r28
  5c:	9e 01       	movw	r18, r28
  5e:	9e 01       	movw	r18, r28
  60:	9e 01       	movw	r18, r28
  62:	9e 01       	movw	r18, r28
  64:	9e 01       	movw	r18, r28
  66:	9e 01       	movw	r18, r28
  68:	9e 01       	movw	r18, r28
  6a:	9e 01       	movw	r18, r28
  6c:	9e 01       	movw	r18, r28
  6e:	9e 01       	movw	r18, r28
  70:	9e 01       	movw	r18, r28
  72:	9e 01       	movw	r18, r28
  74:	9e 01       	movw	r18, r28
  76:	9e 01       	movw	r18, r28
  78:	9e 01       	movw	r18, r28
  7a:	9e 01       	movw	r18, r28
  7c:	9e 01       	movw	r18, r28
  7e:	9e 01       	movw	r18, r28
  80:	9e 01       	movw	r18, r28
  82:	9e 01       	movw	r18, r28
  84:	9c 01       	movw	r18, r24
  86:	9e 01       	movw	r18, r28
  88:	9e 01       	movw	r18, r28
  8a:	9e 01       	movw	r18, r28
  8c:	9e 01       	movw	r18, r28
  8e:	9e 01       	movw	r18, r28
  90:	9e 01       	movw	r18, r28
  92:	9e 01       	movw	r18, r28
  94:	a0 01       	movw	r20, r0
  96:	9e 01       	movw	r18, r28
  98:	9e 01       	movw	r18, r28
  9a:	9e 01       	movw	r18, r28
  9c:	9e 01       	movw	r18, r28
  9e:	9e 01       	movw	r18, r28
  a0:	9e 01       	movw	r18, r28
  a2:	9e 01       	movw	r18, r28
  a4:	9c 01       	movw	r18, r24
  a6:	9e 01       	movw	r18, r28
  a8:	9e 01       	movw	r18, r28
  aa:	9e 01       	movw	r18, r28
  ac:	9e 01       	movw	r18, r28
  ae:	9e 01       	movw	r18, r28
  b0:	9e 01       	movw	r18, r28
  b2:	9e 01       	movw	r18, r28
  b4:	a0 01       	movw	r20, r0
  b6:	9e 01       	movw	r18, r28
  b8:	9e 01       	movw	r18, r28
  ba:	9e 01       	movw	r18, r28
  bc:	9e 01       	movw	r18, r28
  be:	9e 01       	movw	r18, r28
  c0:	9e 01       	movw	r18, r28
  c2:	9e 01       	movw	r18, r28
  c4:	a0 01       	movw	r20, r0
  c6:	9e 01       	movw	r18, r28
  c8:	9e 01       	movw	r18, r28
  ca:	9e 01       	movw	r18, r28
  cc:	9e 01       	movw	r18, r28
  ce:	9e 01       	movw	r18, r28
  d0:	9e 01       	movw	r18, r28
  d2:	9e 01       	movw	r18, r28
  d4:	9c 01       	movw	r18, r24
  d6:	9e 01       	movw	r18, r28
  d8:	9e 01       	movw	r18, r28
  da:	9e 01       	movw	r18, r28
  dc:	9e 01       	movw	r18, r28
  de:	9e 01       	movw	r18, r28
  e0:	9e 01       	movw	r18, r28
  e2:	9e 01       	movw	r18, r28
  e4:	a0 01       	movw	r20, r0
  e6:	9e 01       	movw	r18, r28
  e8:	9e 01       	movw	r18, r28
  ea:	9e 01       	movw	r18, r28
  ec:	9e 01       	movw	r18, r28
  ee:	9e 01       	movw	r18, r28
  f0:	9e 01       	movw	r18, r28
  f2:	9e 01       	movw	r18, r28
  f4:	9c 01       	movw	r18, r24
  f6:	9e 01       	movw	r18, r28
  f8:	9e 01       	movw	r18, r28
  fa:	9e 01       	movw	r18, r28
  fc:	9e 01       	movw	r18, r28
  fe:	9e 01       	movw	r18, r28
 100:	9e 01       	movw	r18, r28
 102:	9e 01       	movw	r18, r28
 104:	a0 01       	movw	r20, r0
 106:	4e 04       	cpc	r4, r14
 108:	52 04       	cpc	r5, r2
 10a:	52 04       	cpc	r5, r2
 10c:	52 04       	cpc	r5, r2
 10e:	52 04       	cpc	r5, r2
 110:	52 04       	cpc	r5, r2
 112:	52 04       	cpc	r5, r2
 114:	52 04       	cpc	r5, r2
 116:	8e 03       	fmulsu	r16, r22
 118:	52 04       	cpc	r5, r2
 11a:	52 04       	cpc	r5, r2
 11c:	52 04       	cpc	r5, r2
 11e:	52 04       	cpc	r5, r2
 120:	52 04       	cpc	r5, r2
 122:	52 04       	cpc	r5, r2
 124:	52 04       	cpc	r5, r2
 126:	8e 03       	fmulsu	r16, r22
 128:	52 04       	cpc	r5, r2
 12a:	52 04       	cpc	r5, r2
 12c:	52 04       	cpc	r5, r2
 12e:	52 04       	cpc	r5, r2
 130:	52 04       	cpc	r5, r2
 132:	52 04       	cpc	r5, r2
 134:	52 04       	cpc	r5, r2
 136:	94 03       	fmuls	r17, r20
 138:	52 04       	cpc	r5, r2
 13a:	52 04       	cpc	r5, r2
 13c:	52 04       	cpc	r5, r2
 13e:	52 04       	cpc	r5, r2
 140:	52 04       	cpc	r5, r2
 142:	52 04       	cpc	r5, r2
 144:	52 04       	cpc	r5, r2
 146:	ab 03       	fmulsu	r18, r19
 148:	52 04       	cpc	r5, r2
 14a:	52 04       	cpc	r5, r2
 14c:	52 04       	cpc	r5, r2
 14e:	52 04       	cpc	r5, r2
 150:	52 04       	cpc	r5, r2
 152:	52 04       	cpc	r5, r2
 154:	52 04       	cpc	r5, r2
 156:	94 03       	fmuls	r17, r20
 158:	52 04       	cpc	r5, r2
 15a:	52 04       	cpc	r5, r2
 15c:	52 04       	cpc	r5, r2
 15e:	52 04       	cpc	r5, r2
 160:	52 04       	cpc	r5, r2
 162:	52 04       	cpc	r5, r2
 164:	52 04       	cpc	r5, r2
 166:	b1 03       	fmuls	r19, r17
 168:	52 04       	cpc	r5, r2
 16a:	52 04       	cpc	r5, r2
 16c:	52 04       	cpc	r5, r2
 16e:	52 04       	cpc	r5, r2
 170:	52 04       	cpc	r5, r2
 172:	52 04       	cpc	r5, r2
 174:	52 04       	cpc	r5, r2
 176:	b7 03       	fmuls	r19, r23
 178:	52 04       	cpc	r5, r2
 17a:	52 04       	cpc	r5, r2
 17c:	52 04       	cpc	r5, r2
 17e:	52 04       	cpc	r5, r2
 180:	52 04       	cpc	r5, r2
 182:	52 04       	cpc	r5, r2
 184:	52 04       	cpc	r5, r2
 186:	c8 03       	fmulsu	r20, r16
 188:	52 04       	cpc	r5, r2
 18a:	52 04       	cpc	r5, r2
 18c:	52 04       	cpc	r5, r2
 18e:	52 04       	cpc	r5, r2
 190:	52 04       	cpc	r5, r2
 192:	52 04       	cpc	r5, r2
 194:	52 04       	cpc	r5, r2
 196:	df 03       	fmulsu	r21, r23
 198:	52 04       	cpc	r5, r2
 19a:	52 04       	cpc	r5, r2
 19c:	52 04       	cpc	r5, r2
 19e:	52 04       	cpc	r5, r2
 1a0:	52 04       	cpc	r5, r2
 1a2:	52 04       	cpc	r5, r2
 1a4:	52 04       	cpc	r5, r2
 1a6:	bd 03       	fmulsu	r19, r21
 1a8:	52 04       	cpc	r5, r2
 1aa:	52 04       	cpc	r5, r2
 1ac:	52 04       	cpc	r5, r2
 1ae:	52 04       	cpc	r5, r2
 1b0:	52 04       	cpc	r5, r2
 1b2:	52 04       	cpc	r5, r2
 1b4:	52 04       	cpc	r5, r2
 1b6:	d4 03       	fmuls	r21, r20
 1b8:	52 04       	cpc	r5, r2
 1ba:	52 04       	cpc	r5, r2
 1bc:	52 04       	cpc	r5, r2
 1be:	52 04       	cpc	r5, r2
 1c0:	52 04       	cpc	r5, r2
 1c2:	52 04       	cpc	r5, r2
 1c4:	52 04       	cpc	r5, r2
 1c6:	e2 03       	fmuls	r22, r18
 1c8:	52 04       	cpc	r5, r2
 1ca:	52 04       	cpc	r5, r2
 1cc:	52 04       	cpc	r5, r2
 1ce:	52 04       	cpc	r5, r2
 1d0:	52 04       	cpc	r5, r2
 1d2:	52 04       	cpc	r5, r2
 1d4:	52 04       	cpc	r5, r2
 1d6:	e2 03       	fmuls	r22, r18
 1d8:	52 04       	cpc	r5, r2
 1da:	52 04       	cpc	r5, r2
 1dc:	52 04       	cpc	r5, r2
 1de:	52 04       	cpc	r5, r2
 1e0:	52 04       	cpc	r5, r2
 1e2:	52 04       	cpc	r5, r2
 1e4:	52 04       	cpc	r5, r2
 1e6:	e2 03       	fmuls	r22, r18
 1e8:	52 04       	cpc	r5, r2
 1ea:	52 04       	cpc	r5, r2
 1ec:	52 04       	cpc	r5, r2
 1ee:	52 04       	cpc	r5, r2
 1f0:	52 04       	cpc	r5, r2
 1f2:	52 04       	cpc	r5, r2
 1f4:	52 04       	cpc	r5, r2
 1f6:	e2 03       	fmuls	r22, r18
 1f8:	52 04       	cpc	r5, r2
 1fa:	52 04       	cpc	r5, r2
 1fc:	52 04       	cpc	r5, r2
 1fe:	52 04       	cpc	r5, r2
 200:	52 04       	cpc	r5, r2
 202:	52 04       	cpc	r5, r2
 204:	52 04       	cpc	r5, r2
 206:	ea 03       	fmulsu	r22, r18
 208:	52 04       	cpc	r5, r2
 20a:	52 04       	cpc	r5, r2
 20c:	52 04       	cpc	r5, r2
 20e:	52 04       	cpc	r5, r2
 210:	52 04       	cpc	r5, r2
 212:	52 04       	cpc	r5, r2
 214:	52 04       	cpc	r5, r2
 216:	1a 04       	cpc	r1, r10
 218:	52 04       	cpc	r5, r2
 21a:	52 04       	cpc	r5, r2
 21c:	52 04       	cpc	r5, r2
 21e:	52 04       	cpc	r5, r2
 220:	52 04       	cpc	r5, r2
 222:	52 04       	cpc	r5, r2
 224:	52 04       	cpc	r5, r2
 226:	ea 03       	fmulsu	r22, r18
 228:	52 04       	cpc	r5, r2
 22a:	52 04       	cpc	r5, r2
 22c:	52 04       	cpc	r5, r2
 22e:	52 04       	cpc	r5, r2
 230:	52 04       	cpc	r5, r2
 232:	52 04       	cpc	r5, r2
 234:	52 04       	cpc	r5, r2
 236:	1a 04       	cpc	r1, r10
 238:	52 04       	cpc	r5, r2
 23a:	52 04       	cpc	r5, r2
 23c:	52 04       	cpc	r5, r2
 23e:	52 04       	cpc	r5, r2
 240:	52 04       	cpc	r5, r2
 242:	52 04       	cpc	r5, r2
 244:	52 04       	cpc	r5, r2
 246:	ff 03       	fmulsu	r23, r23
 248:	52 04       	cpc	r5, r2
 24a:	52 04       	cpc	r5, r2
 24c:	52 04       	cpc	r5, r2
 24e:	52 04       	cpc	r5, r2
 250:	52 04       	cpc	r5, r2
 252:	52 04       	cpc	r5, r2
 254:	52 04       	cpc	r5, r2
 256:	1d 04       	cpc	r1, r13
 258:	52 04       	cpc	r5, r2
 25a:	52 04       	cpc	r5, r2
 25c:	52 04       	cpc	r5, r2
 25e:	52 04       	cpc	r5, r2
 260:	52 04       	cpc	r5, r2
 262:	52 04       	cpc	r5, r2
 264:	52 04       	cpc	r5, r2
 266:	1d 04       	cpc	r1, r13
 268:	52 04       	cpc	r5, r2
 26a:	52 04       	cpc	r5, r2
 26c:	52 04       	cpc	r5, r2
 26e:	52 04       	cpc	r5, r2
 270:	52 04       	cpc	r5, r2
 272:	52 04       	cpc	r5, r2
 274:	52 04       	cpc	r5, r2
 276:	32 04       	cpc	r3, r2
 278:	52 04       	cpc	r5, r2
 27a:	52 04       	cpc	r5, r2
 27c:	52 04       	cpc	r5, r2
 27e:	52 04       	cpc	r5, r2
 280:	52 04       	cpc	r5, r2
 282:	52 04       	cpc	r5, r2
 284:	52 04       	cpc	r5, r2
 286:	49 04       	cpc	r4, r9
 288:	52 04       	cpc	r5, r2
 28a:	52 04       	cpc	r5, r2
 28c:	52 04       	cpc	r5, r2
 28e:	52 04       	cpc	r5, r2
 290:	52 04       	cpc	r5, r2
 292:	52 04       	cpc	r5, r2
 294:	52 04       	cpc	r5, r2
 296:	49 04       	cpc	r4, r9

00000298 <__ctors_end>:
 298:	11 24       	eor	r1, r1
 29a:	1f be       	out	0x3f, r1	; 63
 29c:	cf e5       	ldi	r28, 0x5F	; 95
 29e:	d8 e0       	ldi	r29, 0x08	; 8
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	cd bf       	out	0x3d, r28	; 61

000002a4 <__do_copy_data>:
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	a0 e6       	ldi	r26, 0x60	; 96
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e6 ed       	ldi	r30, 0xD6	; 214
 2ac:	f8 e0       	ldi	r31, 0x08	; 8
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x10>
 2b0:	05 90       	lpm	r0, Z+
 2b2:	0d 92       	st	X+, r0
 2b4:	aa 38       	cpi	r26, 0x8A	; 138
 2b6:	b1 07       	cpc	r27, r17
 2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0xc>

000002ba <__do_clear_bss>:
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	aa e8       	ldi	r26, 0x8A	; 138
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
 2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
 2c4:	a6 3f       	cpi	r26, 0xF6	; 246
 2c6:	b2 07       	cpc	r27, r18
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>
 2ca:	0e 94 1f 03 	call	0x63e	; 0x63e <main>
 2ce:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_exit>

000002d2 <__bad_interrupt>:
 2d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d6 <twi_INIT>:
#define TW_WRITE                    0


void twi_INIT(void){
    
    TWI_BUS_DDR  &= ~(1 << SDA) & ~(1 << SCL);   //make sda and scl inputs
 2d6:	84 b3       	in	r24, 0x14	; 20
 2d8:	8c 7f       	andi	r24, 0xFC	; 252
 2da:	84 bb       	out	0x14, r24	; 20
    TWI_BUS_PORT &= ~(1 << SDA) & ~(1 << SCL);   //disable internal pullups
 2dc:	85 b3       	in	r24, 0x15	; 21
 2de:	8c 7f       	andi	r24, 0xFC	; 252
 2e0:	85 bb       	out	0x15, r24	; 21

    TWSR = 0;                                    //clear the prescaler bits
 2e2:	11 b8       	out	0x01, r1	; 1
    
#if F_CPU < 1600000UL                            //if F_CPU is less than 0.16MHz
    TWBR = 0;                                    //whats the point of scalling down the TW Clock?
 2e4:	10 b8       	out	0x00, r1	; 0
#else 
    TWBR = ((F_CPU / I2C_FREQ) - 16)/2;          //should be > 10 to work properly
#endif
    TWCR = _BV(TWEN);                            //set TWEn to enable twi
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	86 bf       	out	0x36, r24	; 54
 2ea:	08 95       	ret

000002ec <twi_START>:
}/*end of INIT*/



unsigned char twi_START(void){
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);  //SEND A start condition.this takes a few clock cycles
 2ec:	84 ea       	ldi	r24, 0xA4	; 164
 2ee:	86 bf       	out	0x36, r24	; 54
    
    //since it is slow a while loop is used to check when TWINT is high
    while ((TWCR & _BV(TWINT)) == 0) ;
 2f0:	06 b6       	in	r0, 0x36	; 54
 2f2:	07 fe       	sbrs	r0, 7
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <twi_START+0x4>
    //now proceeds
    
    switch (TW_STATUS) {
 2f6:	81 b1       	in	r24, 0x01	; 1
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	88 30       	cpi	r24, 0x08	; 8
 2fc:	11 f0       	breq	.+4      	; 0x302 <twi_START+0x16>
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	11 f4       	brne	.+4      	; 0x306 <twi_START+0x1a>
        
        case TW_START:
        case TW_REP_START:
            return 0;                       //start condition was accepted, no error
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
        default:
            return 1;                       //A bus collision occured, error, two masters comm at same time
 306:	81 e0       	ldi	r24, 0x01	; 1
    }
    
}/*end of START*/
 308:	08 95       	ret

0000030a <twi_STOP>:

void twi_STOP(void){
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);     //send stop condition on bus
 30a:	84 e9       	ldi	r24, 0x94	; 148
 30c:	86 bf       	out	0x36, r24	; 54
    while (TWCR & _BV(TWSTO));                      //wait for stop to be applied
 30e:	06 b6       	in	r0, 0x36	; 54
 310:	04 fc       	sbrc	r0, 4
 312:	fd cf       	rjmp	.-6      	; 0x30e <twi_STOP+0x4>
}/*end of stop*/
 314:	08 95       	ret

00000316 <twi_writeChar>:




unsigned char twi_writeChar(unsigned char data){
    TWDR = data;
 316:	83 b9       	out	0x03, r24	; 3
    TWCR = _BV(TWINT) | _BV(TWEN);
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	86 bf       	out	0x36, r24	; 54
    
    while ((TWCR & _BV(TWINT)) == 0) ;          //any non 0 return indicates an error
 31c:	06 b6       	in	r0, 0x36	; 54
 31e:	07 fe       	sbrs	r0, 7
 320:	fd cf       	rjmp	.-6      	; 0x31c <twi_writeChar+0x6>
    
    switch (TW_STATUS) {
 322:	81 b1       	in	r24, 0x01	; 1
 324:	88 7f       	andi	r24, 0xF8	; 248
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	89 35       	cpi	r24, 0x59	; 89
 32a:	91 05       	cpc	r25, r1
 32c:	38 f4       	brcc	.+14     	; 0x33c <twi_writeChar+0x26>
 32e:	fc 01       	movw	r30, r24
 330:	e6 5d       	subi	r30, 0xD6	; 214
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__tablejump2__>
        case TW_MT_SLA_ACK:     //if any of these statuses are returned, succesful write
        case TW_MT_DATA_ACK:
        case TW_MR_SLA_ACK:
        case TW_MR_DATA_ACK:
            return 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
        case TW_MR_DATA_NACK:
        case TW_MT_ARB_LOST:
            return 1;
            
        default:
            return 2;           //complete failure
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	08 95       	ret
        case TW_MT_SLA_NACK:
        case TW_MT_DATA_NACK:
        case TW_MR_SLA_NACK:
        case TW_MR_DATA_NACK:
        case TW_MT_ARB_LOST:
            return 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
            return 2;           //complete failure
            

    }
    
}/*end of writeChar*/
 342:	08 95       	ret

00000344 <twi_readChar_ACK>:



unsigned char twi_readChar_ACK(void){
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN);  //setting TWEA sends an ack
 344:	84 ec       	ldi	r24, 0xC4	; 196
 346:	86 bf       	out	0x36, r24	; 54
    
    while ((TWCR & _BV(TWINT)) == 0);
 348:	06 b6       	in	r0, 0x36	; 54
 34a:	07 fe       	sbrs	r0, 7
 34c:	fd cf       	rjmp	.-6      	; 0x348 <twi_readChar_ACK+0x4>
    
    return TWDR;
 34e:	83 b1       	in	r24, 0x03	; 3
}/* end of readChar_ack */
 350:	08 95       	ret

00000352 <bcdToDec>:
    return( (val/10*16) + (val%10) );
}

// Convert binary coded decimal to normal decimal numbers
uint8_t bcdToDec(uint8_t val){
    return( (val/16*10) + (val%16) );
 352:	98 2f       	mov	r25, r24
 354:	92 95       	swap	r25
 356:	9f 70       	andi	r25, 0x0F	; 15
 358:	99 0f       	add	r25, r25
 35a:	29 2f       	mov	r18, r25
 35c:	22 0f       	add	r18, r18
 35e:	22 0f       	add	r18, r18
 360:	92 0f       	add	r25, r18
 362:	8f 70       	andi	r24, 0x0F	; 15
}
 364:	89 0f       	add	r24, r25
 366:	08 95       	ret

00000368 <DS3231_getTime>:
void DS3231_getTime(uint8_t *second, uint8_t *minute,
                    uint8_t *hour,
                    uint8_t *dayOfWeek,
                    uint8_t *dayOfMonth,
                    uint8_t *month,
                    uint8_t *year){
 368:	6f 92       	push	r6
 36a:	7f 92       	push	r7
 36c:	8f 92       	push	r8
 36e:	9f 92       	push	r9
 370:	af 92       	push	r10
 372:	bf 92       	push	r11
 374:	cf 92       	push	r12
 376:	df 92       	push	r13
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	4c 01       	movw	r8, r24
 386:	5b 01       	movw	r10, r22
 388:	ea 01       	movw	r28, r20
 38a:	39 01       	movw	r6, r18
    
    twi_START();
 38c:	0e 94 76 01 	call	0x2ec	; 0x2ec <twi_START>
    twi_writeChar(DS3231_ADDRESS<<1|TW_WRITE);
 390:	80 ed       	ldi	r24, 0xD0	; 208
 392:	0e 94 8b 01 	call	0x316	; 0x316 <twi_writeChar>
    twi_writeChar(0x00);            // set DS3231 register pointer to 00h
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 8b 01 	call	0x316	; 0x316 <twi_writeChar>
    twi_STOP();
 39c:	0e 94 85 01 	call	0x30a	; 0x30a <twi_STOP>
    
    twi_START();
 3a0:	0e 94 76 01 	call	0x2ec	; 0x2ec <twi_START>
    twi_writeChar(DS3231_ADDRESS<<1|TW_READ);
 3a4:	81 ed       	ldi	r24, 0xD1	; 209
 3a6:	0e 94 8b 01 	call	0x316	; 0x316 <twi_writeChar>
    
    *second     = bcdToDec(twi_readChar_ACK() & 0x7f);
 3aa:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3ae:	8f 77       	andi	r24, 0x7F	; 127
 3b0:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3b4:	f4 01       	movw	r30, r8
 3b6:	80 83       	st	Z, r24
    *minute     = bcdToDec(twi_readChar_ACK());
 3b8:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3bc:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3c0:	f5 01       	movw	r30, r10
 3c2:	80 83       	st	Z, r24
    *hour       = bcdToDec(twi_readChar_ACK() & 0x3f);
 3c4:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3c8:	8f 73       	andi	r24, 0x3F	; 63
 3ca:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3ce:	88 83       	st	Y, r24
    *dayOfWeek  = bcdToDec(twi_readChar_ACK());
 3d0:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3d4:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3d8:	f3 01       	movw	r30, r6
 3da:	80 83       	st	Z, r24
    *dayOfMonth = bcdToDec(twi_readChar_ACK());
 3dc:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3e0:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 83       	st	Z, r24
    *month      = bcdToDec(twi_readChar_ACK());
 3e8:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3ec:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3f0:	f7 01       	movw	r30, r14
 3f2:	80 83       	st	Z, r24
    *year       = bcdToDec(twi_readChar_ACK());
 3f4:	0e 94 a2 01 	call	0x344	; 0x344 <twi_readChar_ACK>
 3f8:	0e 94 a9 01 	call	0x352	; 0x352 <bcdToDec>
 3fc:	f6 01       	movw	r30, r12
 3fe:	80 83       	st	Z, r24
    
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	bf 90       	pop	r11
 412:	af 90       	pop	r10
 414:	9f 90       	pop	r9
 416:	8f 90       	pop	r8
 418:	7f 90       	pop	r7
 41a:	6f 90       	pop	r6
 41c:	08 95       	ret

0000041e <init7Seg>:
	
		
};

void init7Seg() {
	DDRB = 0xFF; // Set PORTB as output for latches
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF; // Assuming 7-segment display control pins are connected to PORTC
 422:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1 << PA3) | (1 << PA4) | (1 << PA5) | (1 << PA6) | (1 << PA7); // Set PA3, PA4, PA5, PA6 as output for clock pulses
 424:	8a b3       	in	r24, 0x1a	; 26
 426:	88 6f       	ori	r24, 0xF8	; 248
 428:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~((1 << PA3) | (1 << PA4) | (1 << PA5) | (1 << PA6)); // Set PA3, PA4, PA5, PA6 to logic lo
 42a:	8b b3       	in	r24, 0x1b	; 27
 42c:	87 78       	andi	r24, 0x87	; 135
 42e:	8b bb       	out	0x1b, r24	; 27
	DDRA |= (1 << PA7);
 430:	d7 9a       	sbi	0x1a, 7	; 26
 432:	08 95       	ret

00000434 <displayTime>:
}

void displayTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2a 97       	sbiw	r28, 0x0a	; 10
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
	// 7-segment patterns for numbers 0-9
	const uint8_t segments[10] = {
 448:	9a e0       	ldi	r25, 0x0A	; 10
 44a:	e0 e6       	ldi	r30, 0x60	; 96
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	de 01       	movw	r26, r28
 450:	11 96       	adiw	r26, 0x01	; 1
 452:	01 90       	ld	r0, Z+
 454:	0d 92       	st	X+, r0
 456:	9a 95       	dec	r25
 458:	e1 f7       	brne	.-8      	; 0x452 <displayTime+0x1e>
		0b01101111  // 9
	};

	// Extract individual digits from hours, minutes, and seconds
	uint8_t hourDigit0 = hours / 10;
	uint8_t hourDigit1 = hours % 10;
 45a:	9d ec       	ldi	r25, 0xCD	; 205
 45c:	89 9f       	mul	r24, r25
 45e:	21 2d       	mov	r18, r1
 460:	11 24       	eor	r1, r1
 462:	26 95       	lsr	r18
 464:	26 95       	lsr	r18
 466:	26 95       	lsr	r18
 468:	32 2f       	mov	r19, r18
 46a:	33 0f       	add	r19, r19
 46c:	43 2f       	mov	r20, r19
 46e:	44 0f       	add	r20, r20
 470:	44 0f       	add	r20, r20
 472:	34 0f       	add	r19, r20
 474:	83 1b       	sub	r24, r19
	uint8_t minuteDigit0 = minutes / 10;
	uint8_t minuteDigit1 = minutes % 10;

	// Display hours on displays D and C
	PORTB = segments[hourDigit1];
 476:	e1 e0       	ldi	r30, 0x01	; 1
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	ec 0f       	add	r30, r28
 47c:	fd 1f       	adc	r31, r29
 47e:	e8 0f       	add	r30, r24
 480:	f1 1d       	adc	r31, r1
 482:	80 81       	ld	r24, Z
 484:	88 bb       	out	0x18, r24	; 24
	PORTA |= (1 << PA4); // Clock pulse for display C
 486:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA &= ~(1 << PA4);
 488:	dc 98       	cbi	0x1b, 4	; 27
	PORTB = segments[hourDigit0];
 48a:	e1 e0       	ldi	r30, 0x01	; 1
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	ec 0f       	add	r30, r28
 490:	fd 1f       	adc	r31, r29
 492:	e2 0f       	add	r30, r18
 494:	f1 1d       	adc	r31, r1
 496:	80 81       	ld	r24, Z
 498:	88 bb       	out	0x18, r24	; 24
	PORTA |= (1 << PA3); // Clock pulse for display D
 49a:	db 9a       	sbi	0x1b, 3	; 27
	PORTA &= ~(1 << PA3);
 49c:	db 98       	cbi	0x1b, 3	; 27

	// Extract individual digits from hours, minutes, and seconds
	uint8_t hourDigit0 = hours / 10;
	uint8_t hourDigit1 = hours % 10;
	uint8_t minuteDigit0 = minutes / 10;
	uint8_t minuteDigit1 = minutes % 10;
 49e:	69 9f       	mul	r22, r25
 4a0:	81 2d       	mov	r24, r1
 4a2:	11 24       	eor	r1, r1
 4a4:	86 95       	lsr	r24
 4a6:	86 95       	lsr	r24
 4a8:	86 95       	lsr	r24
 4aa:	98 2f       	mov	r25, r24
 4ac:	99 0f       	add	r25, r25
 4ae:	29 2f       	mov	r18, r25
 4b0:	22 0f       	add	r18, r18
 4b2:	22 0f       	add	r18, r18
 4b4:	92 0f       	add	r25, r18
 4b6:	69 1b       	sub	r22, r25
	PORTB = segments[hourDigit0];
	PORTA |= (1 << PA3); // Clock pulse for display D
	PORTA &= ~(1 << PA3);

	// Display minutes on displays B and A
	PORTB = segments[minuteDigit1];
 4b8:	e1 e0       	ldi	r30, 0x01	; 1
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ec 0f       	add	r30, r28
 4be:	fd 1f       	adc	r31, r29
 4c0:	e6 0f       	add	r30, r22
 4c2:	f1 1d       	adc	r31, r1
 4c4:	90 81       	ld	r25, Z
 4c6:	98 bb       	out	0x18, r25	; 24
	PORTA |= (1 << PA6); // Clock pulse for display A
 4c8:	de 9a       	sbi	0x1b, 6	; 27
	PORTA &= ~(1 << PA6);
 4ca:	de 98       	cbi	0x1b, 6	; 27

	PORTB = segments[minuteDigit0];
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ec 0f       	add	r30, r28
 4d2:	fd 1f       	adc	r31, r29
 4d4:	e8 0f       	add	r30, r24
 4d6:	f1 1d       	adc	r31, r1
 4d8:	80 81       	ld	r24, Z
 4da:	88 bb       	out	0x18, r24	; 24
	PORTA |= (1 << PA5); // Clock pulse for display B
 4dc:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &= ~(1 << PA5);
 4de:	dd 98       	cbi	0x1b, 5	; 27
}
 4e0:	2a 96       	adiw	r28, 0x0a	; 10
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <writeByte>:
		send(i, 0x0A, 0x07);  // Set brightness (adjust as needed, 0x00 to 0x0F)
	}
}

void writeByte(uint8_t byte) {
	SPDR = byte;
 4f2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));  // Wait for transmission complete
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <writeByte+0x2>
}
 4f8:	08 95       	ret

000004fa <writeWord>:

void writeWord(uint8_t address, uint8_t data) {
 4fa:	cf 93       	push	r28
 4fc:	c6 2f       	mov	r28, r22
	writeByte(address);
 4fe:	0e 94 79 02 	call	0x4f2	; 0x4f2 <writeByte>
	writeByte(data);
 502:	8c 2f       	mov	r24, r28
 504:	0e 94 79 02 	call	0x4f2	; 0x4f2 <writeByte>
}
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <send>:
	PORTB = segments[minuteDigit0];
	PORTA |= (1 << PA5); // Clock pulse for display B
	PORTA &= ~(1 << PA5);
}

void send(uint8_t matrix, uint8_t registerIndex, uint8_t value) {
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	c8 2f       	mov	r28, r24
 516:	16 2f       	mov	r17, r22
 518:	04 2f       	mov	r16, r20
	PORTB &= ~(1 << CS_PIN);  // CS_PIN low
 51a:	c2 98       	cbi	0x18, 2	; 24

	// Propagate the data through the series connection
	for (uint8_t i = 0; i < matrix; i++) {
 51c:	88 23       	and	r24, r24
 51e:	e9 f0       	breq	.+58     	; 0x55a <send+0x4e>
 520:	d0 e0       	ldi	r29, 0x00	; 0
		writeWord(0, 0);  // Send a dummy byte to propagate the data
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writeWord>

void send(uint8_t matrix, uint8_t registerIndex, uint8_t value) {
	PORTB &= ~(1 << CS_PIN);  // CS_PIN low

	// Propagate the data through the series connection
	for (uint8_t i = 0; i < matrix; i++) {
 52e:	df 5f       	subi	r29, 0xFF	; 255
 530:	dc 13       	cpse	r29, r28
 532:	f7 cf       	rjmp	.-18     	; 0x522 <send+0x16>
		writeWord(0, 0);  // Send a dummy byte to propagate the data
	}

	writeWord(registerIndex, value);
 534:	60 2f       	mov	r22, r16
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	81 2f       	mov	r24, r17
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writeWord>

	// Clear any remaining propagation
	for (uint8_t i = matrix; i < SEGMENT_COUNT - 1; i++) {
 540:	c3 30       	cpi	r28, 0x03	; 3
 542:	48 f4       	brcc	.+18     	; 0x556 <send+0x4a>
		writeWord(0, 0);  // Send a dummy byte to clear any remaining propagation
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writeWord>
	}

	writeWord(registerIndex, value);

	// Clear any remaining propagation
	for (uint8_t i = matrix; i < SEGMENT_COUNT - 1; i++) {
 550:	cf 5f       	subi	r28, 0xFF	; 255
 552:	c3 30       	cpi	r28, 0x03	; 3
 554:	b8 f3       	brcs	.-18     	; 0x544 <send+0x38>
		writeWord(0, 0);  // Send a dummy byte to clear any remaining propagation
	}

	PORTB |= (1 << CS_PIN);  // CS_PIN high
 556:	c2 9a       	sbi	0x18, 2	; 24
 558:	07 c0       	rjmp	.+14     	; 0x568 <send+0x5c>
	// Propagate the data through the series connection
	for (uint8_t i = 0; i < matrix; i++) {
		writeWord(0, 0);  // Send a dummy byte to propagate the data
	}

	writeWord(registerIndex, value);
 55a:	64 2f       	mov	r22, r20
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	81 2f       	mov	r24, r17
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 7d 02 	call	0x4fa	; 0x4fa <writeWord>
 566:	ee cf       	rjmp	.-36     	; 0x544 <send+0x38>
	for (uint8_t i = matrix; i < SEGMENT_COUNT - 1; i++) {
		writeWord(0, 0);  // Send a dummy byte to clear any remaining propagation
	}

	PORTB |= (1 << CS_PIN);  // CS_PIN high
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

00000572 <clearDisplays>:

void clearDisplays() {
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 578:	d0 e0       	ldi	r29, 0x00	; 0
	}

	PORTB |= (1 << CS_PIN);  // CS_PIN high
}

void clearDisplays() {
 57a:	11 e0       	ldi	r17, 0x01	; 1
 57c:	0b c0       	rjmp	.+22     	; 0x594 <clearDisplays+0x22>
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
		for (uint8_t row = 1; row <= 8; row++) {
			send(i, row, 0);
 57e:	40 e0       	ldi	r20, 0x00	; 0
 580:	6c 2f       	mov	r22, r28
 582:	8d 2f       	mov	r24, r29
 584:	0e 94 86 02 	call	0x50c	; 0x50c <send>
	PORTB |= (1 << CS_PIN);  // CS_PIN high
}

void clearDisplays() {
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
		for (uint8_t row = 1; row <= 8; row++) {
 588:	cf 5f       	subi	r28, 0xFF	; 255
 58a:	c9 30       	cpi	r28, 0x09	; 9
 58c:	c1 f7       	brne	.-16     	; 0x57e <clearDisplays+0xc>

	PORTB |= (1 << CS_PIN);  // CS_PIN high
}

void clearDisplays() {
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 58e:	df 5f       	subi	r29, 0xFF	; 255
 590:	d4 30       	cpi	r29, 0x04	; 4
 592:	11 f0       	breq	.+4      	; 0x598 <clearDisplays+0x26>
	}

	PORTB |= (1 << CS_PIN);  // CS_PIN high
}

void clearDisplays() {
 594:	c1 2f       	mov	r28, r17
 596:	f3 cf       	rjmp	.-26     	; 0x57e <clearDisplays+0xc>
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
		for (uint8_t row = 1; row <= 8; row++) {
			send(i, row, 0);
		}
	}
}
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	08 95       	ret

000005a0 <initSPI>:

void initSPI(void) {
 5a0:	cf 93       	push	r28
	DDRB |= (1 << CLK_PIN) | (1 << DATA_PIN) | (1 << CS_PIN);
 5a2:	87 b3       	in	r24, 0x17	; 23
 5a4:	84 6a       	ori	r24, 0xA4	; 164
 5a6:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << CS_PIN);  // CS_PIN high initially
 5a8:	c2 9a       	sbi	0x18, 2	; 24
	SPCR |= (1 << MSTR) | (1 << SPE);  // Enable SPI as master
 5aa:	8d b1       	in	r24, 0x0d	; 13
 5ac:	80 65       	ori	r24, 0x50	; 80
 5ae:	8d b9       	out	0x0d, r24	; 13
	
	// Set display brightness
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 5b0:	c0 e0       	ldi	r28, 0x00	; 0
		send(i, 0x0A, 0x07);  // Set brightness (adjust as needed, 0x00 to 0x0F)
 5b2:	47 e0       	ldi	r20, 0x07	; 7
 5b4:	6a e0       	ldi	r22, 0x0A	; 10
 5b6:	8c 2f       	mov	r24, r28
 5b8:	0e 94 86 02 	call	0x50c	; 0x50c <send>
	DDRB |= (1 << CLK_PIN) | (1 << DATA_PIN) | (1 << CS_PIN);
	PORTB |= (1 << CS_PIN);  // CS_PIN high initially
	SPCR |= (1 << MSTR) | (1 << SPE);  // Enable SPI as master
	
	// Set display brightness
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 5bc:	cf 5f       	subi	r28, 0xFF	; 255
 5be:	c4 30       	cpi	r28, 0x04	; 4
 5c0:	c1 f7       	brne	.-16     	; 0x5b2 <initSPI+0x12>
		send(i, 0x0A, 0x07);  // Set brightness (adjust as needed, 0x00 to 0x0F)
	}
}
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <handleDotMatrixDisplay>:
void writeWord(uint8_t address, uint8_t data) {
	writeByte(address);
	writeByte(data);
}

void handleDotMatrixDisplay() {
 5c6:	af 92       	push	r10
 5c8:	bf 92       	push	r11
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
	if (PIND & (1 << PIR_PIN)) {
 5d4:	80 9b       	sbis	0x10, 0	; 16
 5d6:	25 c0       	rjmp	.+74     	; 0x622 <handleDotMatrixDisplay+0x5c>
 5d8:	0f 2e       	mov	r0, r31
 5da:	fa e6       	ldi	r31, 0x6A	; 106
 5dc:	af 2e       	mov	r10, r31
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	bf 2e       	mov	r11, r31
 5e2:	f0 2d       	mov	r31, r0
 5e4:	e1 2c       	mov	r14, r1
void writeWord(uint8_t address, uint8_t data) {
	writeByte(address);
	writeByte(data);
}

void handleDotMatrixDisplay() {
 5e6:	d1 2c       	mov	r13, r1
 5e8:	0f c0       	rjmp	.+30     	; 0x608 <handleDotMatrixDisplay+0x42>
	if (PIND & (1 << PIR_PIN)) {
		// Motion detected
		for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				send(i, j + 1, charPatterns[i][j]);
 5ea:	49 91       	ld	r20, Y+
 5ec:	1f 5f       	subi	r17, 0xFF	; 255
 5ee:	61 2f       	mov	r22, r17
 5f0:	8e 2d       	mov	r24, r14
 5f2:	0e 94 86 02 	call	0x50c	; 0x50c <send>

void handleDotMatrixDisplay() {
	if (PIND & (1 << PIR_PIN)) {
		// Motion detected
		for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
			for (uint8_t j = 0; j < 8; j++) {
 5f6:	18 30       	cpi	r17, 0x08	; 8
 5f8:	c1 f7       	brne	.-16     	; 0x5ea <handleDotMatrixDisplay+0x24>
}

void handleDotMatrixDisplay() {
	if (PIND & (1 << PIR_PIN)) {
		// Motion detected
		for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 5fa:	e3 94       	inc	r14
 5fc:	28 e0       	ldi	r18, 0x08	; 8
 5fe:	a2 0e       	add	r10, r18
 600:	b1 1c       	adc	r11, r1
 602:	84 e0       	ldi	r24, 0x04	; 4
 604:	e8 16       	cp	r14, r24
 606:	19 f0       	breq	.+6      	; 0x60e <handleDotMatrixDisplay+0x48>
void writeWord(uint8_t address, uint8_t data) {
	writeByte(address);
	writeByte(data);
}

void handleDotMatrixDisplay() {
 608:	e5 01       	movw	r28, r10
 60a:	1d 2d       	mov	r17, r13
 60c:	ee cf       	rjmp	.-36     	; 0x5ea <handleDotMatrixDisplay+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60e:	9f e3       	ldi	r25, 0x3F	; 63
 610:	22 e4       	ldi	r18, 0x42	; 66
 612:	8f e0       	ldi	r24, 0x0F	; 15
 614:	91 50       	subi	r25, 0x01	; 1
 616:	20 40       	sbci	r18, 0x00	; 0
 618:	80 40       	sbci	r24, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <handleDotMatrixDisplay+0x4e>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <handleDotMatrixDisplay+0x58>
 61e:	00 00       	nop
 620:	02 c0       	rjmp	.+4      	; 0x626 <handleDotMatrixDisplay+0x60>
			
		}
		_delay_ms(5000);
		} else {
		// No motion, clear the display
		clearDisplays();
 622:	0e 94 b9 02 	call	0x572	; 0x572 <clearDisplays>
	}
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	bf 90       	pop	r11
 632:	af 90       	pop	r10
 634:	08 95       	ret

00000636 <disable_SPI>:

void disable_SPI()
{
	SPCR &= ~(1 << SPE);
 636:	6e 98       	cbi	0x0d, 6	; 13
	DDRB = 0xFF;
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	87 bb       	out	0x17, r24	; 23
 63c:	08 95       	ret

0000063e <main>:
}

int main(void) {
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	00 d0       	rcall	.+0      	; 0x644 <main+0x6>
 644:	1f 92       	push	r1
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
	initSPI();
 64a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <initSPI>
	twi_INIT(); 
 64e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <twi_INIT>
	init7Seg();
 652:	0e 94 0f 02 	call	0x41e	; 0x41e <init7Seg>
	//DS3231_setTime(00, 19, 10, NULL, NULL, NULL, NULL);  // 12:10:00 Monday 01/01/2021
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 656:	10 e0       	ldi	r17, 0x00	; 0
		send(i, 0xF, 0); // Disable test mode
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	6f e0       	ldi	r22, 0x0F	; 15
 65c:	81 2f       	mov	r24, r17
 65e:	0e 94 86 02 	call	0x50c	; 0x50c <send>
		send(i, 0xB, 7); // Set scanlines to 8
 662:	47 e0       	ldi	r20, 0x07	; 7
 664:	6b e0       	ldi	r22, 0x0B	; 11
 666:	81 2f       	mov	r24, r17
 668:	0e 94 86 02 	call	0x50c	; 0x50c <send>
		send(i, 0xC, 1); // Enable display
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	6c e0       	ldi	r22, 0x0C	; 12
 670:	81 2f       	mov	r24, r17
 672:	0e 94 86 02 	call	0x50c	; 0x50c <send>
int main(void) {
	initSPI();
	twi_INIT(); 
	init7Seg();
	//DS3231_setTime(00, 19, 10, NULL, NULL, NULL, NULL);  // 12:10:00 Monday 01/01/2021
	for (uint8_t i = 0; i < SEGMENT_COUNT; i++) {
 676:	1f 5f       	subi	r17, 0xFF	; 255
 678:	14 30       	cpi	r17, 0x04	; 4
 67a:	71 f7       	brne	.-36     	; 0x658 <main+0x1a>
		send(i, 0xF, 0); // Disable test mode
		send(i, 0xB, 7); // Set scanlines to 8
		send(i, 0xC, 1); // Enable display
	}
	clearDisplays();
 67c:	0e 94 b9 02 	call	0x572	; 0x572 <clearDisplays>

	while (1) {
		uint8_t hours, minutes, seconds;
		
		disable_SPI();
 680:	0e 94 1b 03 	call	0x636	; 0x636 <disable_SPI>

		// Get current time from DS3231
		DS3231_getTime(&seconds, &minutes, &hours, NULL, NULL, NULL, NULL);
 684:	c1 2c       	mov	r12, r1
 686:	d1 2c       	mov	r13, r1
 688:	e1 2c       	mov	r14, r1
 68a:	f1 2c       	mov	r15, r1
 68c:	00 e0       	ldi	r16, 0x00	; 0
 68e:	10 e0       	ldi	r17, 0x00	; 0
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	ae 01       	movw	r20, r28
 696:	4d 5f       	subi	r20, 0xFD	; 253
 698:	5f 4f       	sbci	r21, 0xFF	; 255
 69a:	be 01       	movw	r22, r28
 69c:	6e 5f       	subi	r22, 0xFE	; 254
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	0e 94 b4 01 	call	0x368	; 0x368 <DS3231_getTime>

		// Display time on 7-segment displays
		displayTime(hours, minutes, seconds);
 6a8:	49 81       	ldd	r20, Y+1	; 0x01
 6aa:	6a 81       	ldd	r22, Y+2	; 0x02
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	0e 94 1a 02 	call	0x434	; 0x434 <displayTime>
		
		initSPI();
 6b2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <initSPI>
		handleDotMatrixDisplay();
 6b6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <handleDotMatrixDisplay>
 6ba:	87 ea       	ldi	r24, 0xA7	; 167
 6bc:	91 e6       	ldi	r25, 0x61	; 97
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <main+0x80>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <main+0x86>
 6c4:	00 00       	nop
 6c6:	dc cf       	rjmp	.-72     	; 0x680 <main+0x42>

000006c8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 6c8:	85 ed       	ldi	r24, 0xD5	; 213
 6ca:	86 bf       	out	0x36, r24	; 54

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 6cc:	06 b6       	in	r0, 0x36	; 54
 6ce:	04 fc       	sbrc	r0, 4
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <twi_stop+0x4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 6d2:	10 92 f5 00 	sts	0x00F5, r1
 6d6:	08 95       	ret

000006d8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 6d8:	85 ec       	ldi	r24, 0xC5	; 197
 6da:	86 bf       	out	0x36, r24	; 54

  // update twi state
  twi_state = TWI_READY;
 6dc:	10 92 f5 00 	sts	0x00F5, r1
 6e0:	08 95       	ret

000006e2 <__vector_19>:
}

SIGNAL(TWI_vect)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
  switch(TW_STATUS){
 704:	81 b1       	in	r24, 0x01	; 1
 706:	88 7f       	andi	r24, 0xF8	; 248
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	89 3c       	cpi	r24, 0xC9	; 201
 70c:	91 05       	cpc	r25, r1
 70e:	08 f0       	brcs	.+2      	; 0x712 <__vector_19+0x30>
 710:	c9 c0       	rjmp	.+402    	; 0x8a4 <__stack+0x45>
 712:	fc 01       	movw	r30, r24
 714:	ed 57       	subi	r30, 0x7D	; 125
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 71c:	80 91 f4 00 	lds	r24, 0x00F4
 720:	83 b9       	out	0x03, r24	; 3
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 722:	85 ec       	ldi	r24, 0xC5	; 197
 724:	86 bf       	out	0x36, r24	; 54
 726:	be c0       	rjmp	.+380    	; 0x8a4 <__stack+0x45>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 728:	90 91 cf 00 	lds	r25, 0x00CF
 72c:	80 91 ce 00 	lds	r24, 0x00CE
 730:	98 17       	cp	r25, r24
 732:	70 f4       	brcc	.+28     	; 0x750 <__vector_19+0x6e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 734:	e0 91 cf 00 	lds	r30, 0x00CF
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	8e 0f       	add	r24, r30
 73c:	80 93 cf 00 	sts	0x00CF, r24
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	e0 53       	subi	r30, 0x30	; 48
 744:	ff 4f       	sbci	r31, 0xFF	; 255
 746:	80 81       	ld	r24, Z
 748:	83 b9       	out	0x03, r24	; 3
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 74a:	85 ec       	ldi	r24, 0xC5	; 197
 74c:	86 bf       	out	0x36, r24	; 54
 74e:	aa c0       	rjmp	.+340    	; 0x8a4 <__stack+0x45>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
        twi_stop();
 750:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
 754:	a7 c0       	rjmp	.+334    	; 0x8a4 <__stack+0x45>
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	80 93 8a 00 	sts	0x008A, r24
      twi_stop();
 75c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
      break;
 760:	a1 c0       	rjmp	.+322    	; 0x8a4 <__stack+0x45>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 762:	80 e3       	ldi	r24, 0x30	; 48
 764:	80 93 8a 00 	sts	0x008A, r24
      twi_stop();
 768:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
      break;
 76c:	9b c0       	rjmp	.+310    	; 0x8a4 <__stack+0x45>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 76e:	88 e3       	ldi	r24, 0x38	; 56
 770:	80 93 8a 00 	sts	0x008A, r24
      twi_releaseBus();
 774:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <twi_releaseBus>
      break;
 778:	95 c0       	rjmp	.+298    	; 0x8a4 <__stack+0x45>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 77a:	e0 91 cf 00 	lds	r30, 0x00CF
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	8e 0f       	add	r24, r30
 782:	80 93 cf 00 	sts	0x00CF, r24
 786:	83 b1       	in	r24, 0x03	; 3
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	e0 53       	subi	r30, 0x30	; 48
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 790:	90 91 cf 00 	lds	r25, 0x00CF
 794:	80 91 ce 00 	lds	r24, 0x00CE
 798:	98 17       	cp	r25, r24
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <__vector_19+0xc0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 79c:	85 ec       	ldi	r24, 0xC5	; 197
 79e:	86 bf       	out	0x36, r24	; 54
 7a0:	81 c0       	rjmp	.+258    	; 0x8a4 <__stack+0x45>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 7a2:	85 e8       	ldi	r24, 0x85	; 133
 7a4:	86 bf       	out	0x36, r24	; 54
 7a6:	7e c0       	rjmp	.+252    	; 0x8a4 <__stack+0x45>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 7a8:	e0 91 cf 00 	lds	r30, 0x00CF
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	8e 0f       	add	r24, r30
 7b0:	80 93 cf 00 	sts	0x00CF, r24
 7b4:	83 b1       	in	r24, 0x03	; 3
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e0 53       	subi	r30, 0x30	; 48
 7ba:	ff 4f       	sbci	r31, 0xFF	; 255
 7bc:	80 83       	st	Z, r24
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 7be:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
      break;
 7c2:	70 c0       	rjmp	.+224    	; 0x8a4 <__stack+0x45>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	80 93 f5 00 	sts	0x00F5, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 7ca:	10 92 8b 00 	sts	0x008B, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 7ce:	85 ec       	ldi	r24, 0xC5	; 197
 7d0:	86 bf       	out	0x36, r24	; 54
 7d2:	68 c0       	rjmp	.+208    	; 0x8a4 <__stack+0x45>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 7d4:	80 91 8b 00 	lds	r24, 0x008B
 7d8:	80 32       	cpi	r24, 0x20	; 32
 7da:	70 f4       	brcc	.+28     	; 0x7f8 <__vector_19+0x116>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 7dc:	e0 91 8b 00 	lds	r30, 0x008B
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	8e 0f       	add	r24, r30
 7e4:	80 93 8b 00 	sts	0x008B, r24
 7e8:	83 b1       	in	r24, 0x03	; 3
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	e4 57       	subi	r30, 0x74	; 116
 7ee:	ff 4f       	sbci	r31, 0xFF	; 255
 7f0:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 7f2:	85 ec       	ldi	r24, 0xC5	; 197
 7f4:	86 bf       	out	0x36, r24	; 54
 7f6:	56 c0       	rjmp	.+172    	; 0x8a4 <__stack+0x45>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 7f8:	85 e8       	ldi	r24, 0x85	; 133
 7fa:	86 bf       	out	0x36, r24	; 54
 7fc:	53 c0       	rjmp	.+166    	; 0x8a4 <__stack+0x45>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 7fe:	80 91 8b 00 	lds	r24, 0x008B
 802:	80 32       	cpi	r24, 0x20	; 32
 804:	30 f4       	brcc	.+12     	; 0x812 <__vector_19+0x130>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 806:	e0 91 8b 00 	lds	r30, 0x008B
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	e4 57       	subi	r30, 0x74	; 116
 80e:	ff 4f       	sbci	r31, 0xFF	; 255
 810:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
 812:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 816:	60 91 8b 00 	lds	r22, 0x008B
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	e0 91 f0 00 	lds	r30, 0x00F0
 820:	f0 91 f1 00 	lds	r31, 0x00F1
 824:	8c e8       	ldi	r24, 0x8C	; 140
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 82a:	10 92 8b 00 	sts	0x008B, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 82e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <twi_releaseBus>
      break;
 832:	38 c0       	rjmp	.+112    	; 0x8a4 <__stack+0x45>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 834:	85 e8       	ldi	r24, 0x85	; 133
 836:	86 bf       	out	0x36, r24	; 54
 838:	35 c0       	rjmp	.+106    	; 0x8a4 <__stack+0x45>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 83a:	84 e0       	ldi	r24, 0x04	; 4
 83c:	80 93 f5 00 	sts	0x00F5, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 840:	10 92 ad 00 	sts	0x00AD, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 844:	10 92 ac 00 	sts	0x00AC, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 848:	e0 91 f2 00 	lds	r30, 0x00F2
 84c:	f0 91 f3 00 	lds	r31, 0x00F3
 850:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 852:	80 91 ac 00 	lds	r24, 0x00AC
 856:	81 11       	cpse	r24, r1
 858:	05 c0       	rjmp	.+10     	; 0x864 <__stack+0x5>
        twi_txBufferLength = 1;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 ac 00 	sts	0x00AC, r24
        twi_txBuffer[0] = 0x00;
 860:	10 92 ae 00 	sts	0x00AE, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 864:	e0 91 ad 00 	lds	r30, 0x00AD
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	8e 0f       	add	r24, r30
 86c:	80 93 ad 00 	sts	0x00AD, r24
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	e2 55       	subi	r30, 0x52	; 82
 874:	ff 4f       	sbci	r31, 0xFF	; 255
 876:	80 81       	ld	r24, Z
 878:	83 b9       	out	0x03, r24	; 3
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 87a:	90 91 ad 00 	lds	r25, 0x00AD
 87e:	80 91 ac 00 	lds	r24, 0x00AC
 882:	98 17       	cp	r25, r24
 884:	18 f4       	brcc	.+6      	; 0x88c <__stack+0x2d>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 886:	85 ec       	ldi	r24, 0xC5	; 197
 888:	86 bf       	out	0x36, r24	; 54
 88a:	0c c0       	rjmp	.+24     	; 0x8a4 <__stack+0x45>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 88c:	85 e8       	ldi	r24, 0x85	; 133
 88e:	86 bf       	out	0x36, r24	; 54
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__stack+0x45>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 892:	85 ec       	ldi	r24, 0xC5	; 197
 894:	86 bf       	out	0x36, r24	; 54
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 896:	10 92 f5 00 	sts	0x00F5, r1
      break;
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__stack+0x45>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 89c:	10 92 8a 00 	sts	0x008A, r1
      twi_stop();
 8a0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <twi_stop>
      break;
  }
}
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__tablejump2__>:
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31

000008ca <__tablejump__>:
 8ca:	05 90       	lpm	r0, Z+
 8cc:	f4 91       	lpm	r31, Z
 8ce:	e0 2d       	mov	r30, r0
 8d0:	09 94       	ijmp

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
